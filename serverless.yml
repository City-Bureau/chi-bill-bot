service: chi-bill-bot

provider:
  name: aws
  runtime: go1.x
  stage: prod
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        - Ref: SNSTopic

package:
  exclude:
    - ./**
  include:
    - ./bin/**

plugins:
  - serverless-dotenv-plugin
  - serverless-plugin-aws-alerts

custom:
  topicName: ${self:service}-prod-events
  AURORA:
    DB_NAME: ${env:RDS_DB_NAME}
    USERNAME: ${env:RDS_USERNAME}
    PASSWORD: ${env:RDS_PASSWORD}
    HOST:
      Fn::GetAtt: [AuroraRDSCluster, Endpoint.Address]
    PORT:
      Fn::GetAtt: [AuroraRDSCluster, Endpoint.Port]
    VPC_CIDR: '10'
  alerts:
    stages:
      - prod
    alarms:
      - functionErrors
    topics:
      alarm:
        topic: ${self:service}-prod-alerts-alarm
        notifications:
          - protocol: email
            endpoint: ${env:SNS_EMAIL}

functions:
  migrate:
    handler: bin/migrate
    timeout: 120
    environment:
      RDS_HOST: ${self:custom.AURORA.HOST}
    alarms:
      - functionErrors
    vpc:
      securityGroupIds:
        - Fn::GetAtt: ServerlessVPC.DefaultSecurityGroup
      subnetIds:
        - Ref: ServerlessSubnetA
        - Ref: ServerlessSubnetB
        - Ref: ServerlessSubnetC
  query_mentions:
    handler: bin/query_mentions
    timeout: 120
    environment:
      SNS_TOPIC_ARN:
        Ref: SNSTopic
    alarms:
      - functionErrors
    events:
      - schedule: rate(30 minutes)
  handle_tweet:
    handler: bin/handle_tweet
    timeout: 120
    environment:
      SNS_TOPIC_ARN:
        Ref: SNSTopic
      RDS_HOST: ${self:custom.AURORA.HOST}
    alarms:
      - functionErrors
    vpc:
      securityGroupIds:
        - Fn::GetAtt: ServerlessVPC.DefaultSecurityGroup
      subnetIds:
        - Ref: ServerlessSubnetA
        - Ref: ServerlessSubnetB
        - Ref: ServerlessSubnetC
    events:
      - sns:
          arn:
            Ref: SNSTopic
          topicName: ${self:custom.topicName}
          filterPolicy:
            feed:
              - handle_tweet
  post_tweet:
    handler: bin/post_tweet
    timeout: 120
    environment:
      SNS_TOPIC_ARN:
        Ref: SNSTopic
    alarms:
      - functionErrors
    events:
      - sns:
          arn:
            Ref: SNSTopic
          topicName: ${self:custom.topicName}
          filterPolicy:
            feed:
              - post_tweet
  save_bill:
    handler: bin/save_bill
    timeout: 120
    environment:
      SNS_TOPIC_ARN:
        Ref: SNSTopic
      RDS_HOST: ${self:custom.AURORA.HOST}
    alarms:
      - functionErrors
    vpc:
      securityGroupIds:
        - Fn::GetAtt: ServerlessVPC.DefaultSecurityGroup
      subnetIds:
        - Ref: ServerlessSubnetA
        - Ref: ServerlessSubnetB
        - Ref: ServerlessSubnetC
    events:
      - sns:
          arn:
            Ref: SNSTopic
          topicName: ${self:custom.topicName}
          filterPolicy:
            feed:
              - save_bill
  query_bills:
    handler: bin/query_bills
    timeout: 120
    environment:
      SNS_TOPIC_ARN:
        Ref: SNSTopic
      RDS_HOST: ${self:custom.AURORA.HOST}
    alarms:
      - functionErrors
    vpc:
      securityGroupIds:
        - Fn::GetAtt: ServerlessVPC.DefaultSecurityGroup
      subnetIds:
        - Ref: ServerlessSubnetA
        - Ref: ServerlessSubnetB
        - Ref: ServerlessSubnetC
    events:
      - schedule: rate(4 hours)
  update_bill:
    handler: bin/update_bill
    timeout: 120
    environment:
      SNS_TOPIC_ARN:
        Ref: SNSTopic
    alarms:
      - functionErrors
    events:
      - sns:
          arn:
            Ref: SNSTopic
          topicName: ${self:custom.topicName}
          filterPolicy:
            feed:
              - update_bill

resources:
  Resources:
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-prod-events
        DisplayName: ChiBillBotEvents
    SNSVPCEndpoint:
      Type: AWS::EC2::VPCEndpoint
      DependsOn: SNSTopic
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - 'sns:*'
              Resource: '*'
        ServiceName: 'com.amazonaws.${self:provider.region}.sns'
        PrivateDnsEnabled: true
        VpcEndpointType: Interface
        SecurityGroupIds:
          - Fn::GetAtt: ServerlessVPC.DefaultSecurityGroup
        SubnetIds:
          - Ref: ServerlessSubnetA
          - Ref: ServerlessSubnetB
          - Ref: ServerlessSubnetC
        VpcId:
          Ref: ServerlessVPC
    ServerlessVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: '${self:custom.AURORA.VPC_CIDR}.0.0.0/16'
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: default
    ServerlessSubnetA:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: '${self:custom.AURORA.VPC_CIDR}.0.0.0/24'
    ServerlessSubnetB:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: '${self:custom.AURORA.VPC_CIDR}.0.1.0/24'
    ServerlessSubnetC:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}c
        CidrBlock: '${self:custom.AURORA.VPC_CIDR}.0.2.0/24'
    AuroraSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "Aurora Subnet Group"
        SubnetIds:
          - Ref: ServerlessSubnetA
          - Ref: ServerlessSubnetB
          - Ref: ServerlessSubnetC
    AuroraRDSCluster:
      Type: "AWS::RDS::DBCluster"
      Properties:
        MasterUsername: ${self:custom.AURORA.USERNAME}
        MasterUserPassword: ${self:custom.AURORA.PASSWORD}
        DBSubnetGroupName:
          Ref: AuroraSubnetGroup
        Engine: aurora
        EngineMode: serverless
        EngineVersion: "5.6"
        DatabaseName: ${self:custom.AURORA.DB_NAME}
        BackupRetentionPeriod: 3
        VpcSecurityGroupIds:
          - Fn::GetAtt: ServerlessVPC.DefaultSecurityGroup
